generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String
  username        String    @unique
  email              String?    
  mobile            String?     
  password           String
  role               String
  active             Boolean   @default(true)
  lastLogin          DateTime?
  resetToken         String?   
  resetTokenExpires  DateTime?
  adminWalletTransactions WalletTransaction[] 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  member             Member? 

  @@map("users")
}

// Define the enum
enum MemberStatus {
  Inactive
  Associate
  Silver
  Gold
  Diamond
}


model Member {
  id              Int       @id @default(autoincrement())
  userId          Int        @unique
  user            User      @relation(fields: [userId], references: [id]) // One-to-one relationship with User
  sponsorId       Int?
  sponsor          Member?   @relation("MemberSponsor", fields: [sponsorId], references: [id], onDelete: Restrict)
  sponsorChildren   Member[]  @relation("MemberSponsor") // Inverse of sponsor
  parentId        Int?
  parent          Member?   @relation("MemberParent", fields: [parentId], references: [id], onDelete: Restrict)
  parentChildren        Member[]  @relation("MemberParent") // Inverse of parent
  memberName      String
  memberUsername  String    @unique
  memberState     String
  leftCount       Int        @default(0)
  leftDirectCount Int        @default(0)
  rightCount      Int        @default(0)
  rightDirectCount Int       @default(0)
  memberEmail     String?   
  memberMobile    String?   
  tPin            String
  positionToParent        String?
  status          MemberStatus @default(Inactive)
  leftBalance Int       @default(0)
  rightBalance Int       @default(0)
  is2_1Pass   Boolean @default(false)
  isDirectMatch Boolean  @default(false)
  isMatchingMentorL1 Boolean  @default(false)
  isMatchingMentorL2 Boolean  @default(false)
  matchingMentorIncomeL1   Decimal   @db.Decimal(10, 2)   @default(0.00) 
  matchingMentorIncomeL2   Decimal   @db.Decimal(10, 2)   @default(0.00) 
  walletBalance   Decimal   @db.Decimal(10, 2)   @default(0.00)
  matchingIncomeWalletBalance   Decimal   @db.Decimal(10, 2)   @default(0.00)
  repurchaseWalletBalance   Decimal   @db.Decimal(10, 2)   @default(0.00)
  upgradeWalletBalance   Decimal   @db.Decimal(10, 2)   @default(0.00)
  percentage                  Decimal    @db.Decimal(5, 2)    @default(100)
  associateCommissionDate        DateTime?            // the date the counter applies to
  silverCommissionDate        DateTime?
  goldCommissionDate        DateTime?
  diamondCommissionDate        DateTime?
  leftAssociateBalance Int     @default(0)
  leftSilverBalance Int     @default(0)
  leftGoldBalance Int     @default(0)
  leftDiamondBalance Int     @default(0)
  rightAssociateBalance Int     @default(0)
  rightSilverBalance Int     @default(0)
  rightGoldBalance Int     @default(0)
  rightDiamondBalance Int     @default(0)
  associateCommissionCount Int     @default(0)
  silverCommissionCount Int     @default(0)
  goldCommissionCount Int     @default(0)
  diamondCommissionCount Int     @default(0)
  memberDob        DateTime?
  memberAddress    String?   @db.Text
  memberPincode     Int?
  memberGender    String?
  panNumber       String?   @unique
  aadharNumber    String?   @unique
  bankName        String?
  bankAccountNumber String?
  bankIfscCode    String?
  bankAccountType String?
  pvBalance       Decimal   @db.Decimal(10, 2)   @default(0.00)
  matchingIncomeEarned       Decimal   @db.Decimal(10, 2)   @default(0.00)
  repurchaseIncomeEarned       Decimal   @db.Decimal(10, 2)   @default(0.00)
  walletTransactions WalletTransaction[] // Relation to WalletTransaction
  purchases        Purchase[] // Relation to Purchase
  repurchases        Repurchase[] // Relation to Purchase
  memberLogs        memberLog[] // Relation to memberLog
  matching_income_commissions        MatchingIncomeCommission[] // Relation to memberLog
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("members")
}

model Product {
  id          Int       @id @default(autoincrement())
  productName String?
  hsnCode     String?
  mrp         Decimal?   @db.Decimal(10, 2)
  mfgRate     Decimal?   @db.Decimal(10, 2)
  gst         Decimal?   @db.Decimal(5, 2)
  dspRate     Decimal?   @db.Decimal(10, 2)
  pv          Decimal?   @db.Decimal(10, 2)
  bv          Decimal?   @db.Decimal(10, 2)
  bvPrice     Decimal?   @db.Decimal(10, 2)
  purchaseDetails PurchaseDetail[] // Relation to PurchaseDetail
  repurchaseDetails RepurchaseDetail[] 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("products")
}


model WalletTransaction {
  id                 Int               @id @default(autoincrement())
  memberId           Int
  member              Member         @relation(fields: [memberId], references: [id],onDelete: Restrict) // Relation to User is now optional
  amount             Decimal   @db.Decimal(10, 2)
  status             String     //pending, approved ,transferred, rejected,Paid
  type               String     // e.g., CREDIT for top-up, DEBIT for withdrawal
  paymentMethod      String?           // e.g., "Cash", "Bank Transfer", "UPI"
  referenceNumber    String?           // e.g., Cheque number, UPI transaction ID
  notes              String?           @db.Text
  transactionDate     DateTime         // Date of the transaction, can be null if not applicable
  processedByAdminId Int?              // Foreign key to User (admin who approved/processed the transaction). Renamed from adminId & made optional.
  processedByAdmin   User?             @relation( fields: [processedByAdminId], references: [id]) // Renamed relation

  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@index([processedByAdminId])   
  @@index([memberId])     

  @@map("wallet_transactions")
}


model Purchase {
  id                   Int       @id @default(autoincrement())
  memberId             Int
  member               Member    @relation(fields: [memberId], references: [id],onDelete: Restrict) // Relation to Member
  invoiceNumber        String?   
  invoiceDate           DateTime?
  invoicePath           String?           @db.Text
  purchaseDate         DateTime  @default(now())
  totalAmountWithoutGst Decimal   @db.Decimal(10, 2)
  totalAmountWithGst   Decimal   @db.Decimal(10, 2)
  totalGstAmount       Decimal   @db.Decimal(10, 2)
  totalProductPV              Decimal   @db.Decimal(10, 2)
  state                 String   // e.g., "Pending", "Completed", "Cancelled"
  purchaseDetails      PurchaseDetail[] // Relation to PurchaseDetail
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("purchases")
}

model PurchaseDetail {
  id                   Int       @id @default(autoincrement())
  purchaseId           Int
  purchase             Purchase  @relation(fields: [purchaseId], references: [id],onDelete: Restrict) // Relation to Purchase
  productId            Int
  product              Product   @relation(fields: [productId], references: [id],onDelete: Restrict) // Relation to Product
  quantity             Int
  rate                 Decimal   @db.Decimal(10, 2)
  netUnitRate                 Decimal   @db.Decimal(10, 2)
  cgstPercent         Decimal   @db.Decimal(5, 2)
  sgstPercent         Decimal   @db.Decimal(5, 2)
  igstPercent         Decimal   @db.Decimal(5, 2)
  cgstAmount            Decimal   @db.Decimal(10, 2)
  sgstAmount            Decimal   @db.Decimal(10, 2)
  igstAmount            Decimal   @db.Decimal(10, 2)
  amountWithoutGst     Decimal   @db.Decimal(10, 2)
  amountWithGst        Decimal   @db.Decimal(10, 2)
  pvPerUnit            Decimal   @db.Decimal(10, 2)
  totalPV              Decimal   @db.Decimal(10, 2)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("purchase_details")
}


model Repurchase {
  id                   Int       @id @default(autoincrement())
  memberId             Int
  member               Member    @relation(fields: [memberId], references: [id],onDelete: Restrict) // Relation to Member
  invoiceNumber        String?   
  invoiceDate           DateTime?
  invoicePath           String?           @db.Text
  repurchaseDate         DateTime  @default(now())
  totalAmountWithoutGst Decimal   @db.Decimal(10, 2)
  totalAmountWithGst   Decimal   @db.Decimal(10, 2)
  totalGstAmount       Decimal   @db.Decimal(10, 2)
  totalProductBV              Decimal   @db.Decimal(10, 2)
  state                 String   // e.g., "Pending", "Completed", "Cancelled"
  repurchaseDetails      RepurchaseDetail[] // Relation to PurchaseDetail
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("repurchases")
}

model RepurchaseDetail {
  id                   Int       @id @default(autoincrement())
  repurchaseId           Int
  repurchase             Repurchase  @relation(fields: [repurchaseId], references: [id],onDelete: Restrict) // Relation to Purchase
  productId            Int
  product              Product   @relation(fields: [productId], references: [id],onDelete: Restrict) // Relation to Product
  quantity             Int
  rate                 Decimal   @db.Decimal(10, 2)
  netUnitRate          Decimal   @db.Decimal(10, 2)
  cgstPercent         Decimal   @db.Decimal(5, 2)
  sgstPercent         Decimal   @db.Decimal(5, 2)
  igstPercent         Decimal   @db.Decimal(5, 2)
  cgstAmount            Decimal   @db.Decimal(10, 2)
  sgstAmount            Decimal   @db.Decimal(10, 2)
  igstAmount            Decimal   @db.Decimal(10, 2)
  amountWithoutGst     Decimal   @db.Decimal(10, 2)
  amountWithGst        Decimal   @db.Decimal(10, 2)
  bvPerUnit            Decimal   @db.Decimal(10, 2)
  totalBV              Decimal   @db.Decimal(10, 2)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("repurchase_details")
}


model memberLog {
  id          Int      @id @default(autoincrement())
  memberId    Int
  member               Member    @relation(fields: [memberId], references: [id],onDelete: Restrict) // Relation to Member
  message     String?
  pv          Decimal   @db.Decimal(10, 2)
  bv          Decimal   @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt            DateTime  @updatedAt

    @@map("member_logs")
}

model MatchingIncomeCommission {
  id                         Int      @id @default(autoincrement())
  memberId                   Int
  member               Member    @relation(fields: [memberId], references: [id],onDelete: Restrict) // Relation to Member
  matchingIncomeCommission   Decimal  @db.Decimal(10, 2)
  isPaid                     Boolean  @default(false)
  paidAt                     DateTime?
  createdAt                  DateTime @default(now())
  @@map("matching_income_commissions")
}
